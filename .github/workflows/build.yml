name: Build Windows Application

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Permite ejecutar el workflow manualmente desde la interfaz de GitHub

jobs:
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: Check for spec file and create if needed
      run: |
        if (-Not (Test-Path "facturacion_app.spec")) {
          Write-Output "Spec file not found. Creating it..."
          Set-Content -Path facturacion_app.spec -Value @'
# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['app/main.py'],  # Script principal
    pathex=[],
    binaries=[],
    datas=[
        ('data', 'data'),  # Incluir la carpeta de datos
    ],
    hiddenimports=[
        'PyQt6', 'PyQt6.QtWidgets', 'PyQt6.QtCore', 'PyQt6.QtGui',
        'numpy', 'cv2', 'pyzbar', 'sqlite3'
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

# Ejecutable único (standalone)
exe = EXE(
    pyz,
    a.scripts,
    a.binaries,        # Incluir todos los binarios en el ejecutable
    a.zipfiles,        # Incluir todos los archivos zip en el ejecutable
    a.datas,           # Incluir todos los datos en el ejecutable
    [],
    name='Sistema de Facturacion',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
)
'@
        }
        
    - name: Build with PyInstaller
      run: |
        dir
        pyinstaller --clean facturacion_app.spec
      
    - name: Create ZIP archive
      run: |
        # Crear directorio para el paquete final
        mkdir -p output
        
        # Comprobar si el ejecutable existe y copiarlo
        if (Test-Path "dist/Sistema de Facturacion.exe") {
          Copy-Item "dist/Sistema de Facturacion.exe" -Destination "output/"
          Compress-Archive -Path "output/*" -DestinationPath "Sistema_de_Facturacion_Windows.zip"
        } else {
          Write-Error "No se encontró el ejecutable. Verificando el contenido del directorio dist:"
          dir dist
          exit 1
        }
        
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: windows-build
        path: Sistema_de_Facturacion_Windows.zip
        
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: Sistema_de_Facturacion_Windows.zip
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}